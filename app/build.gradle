apply plugin: 'com.android.application'

static def getPackageName() {
    return "com.jyn.linphone"
}

android {
    lintOptions {
        abortOnError false
    }

    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 4230
        versionName "${project.version}"
        applicationId getPackageName()
        multiDexEnabled true
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "linphone-android-${variant.buildType.name}-${project.version}.apk"
        }

        if (variant.buildType.name == "release") {
            variant.getMergedFlavor().manifestPlaceholders = [linphone_address_mime_type: "vnd.android.cursor.item/vnd." + getPackageName() + ".provider.sip_address",
                                                              linphone_file_provider: getPackageName() + ".provider"]
        } else {
            variant.getMergedFlavor().manifestPlaceholders = [linphone_address_mime_type: "vnd.android.cursor.item/vnd." + getPackageName() + ".provider.sip_address",
                                                              linphone_file_provider: getPackageName() + ".debug.provider"]
        }
    }

    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue "string", "sync_account_type", getPackageName() + ".sync"
            resValue "string", "file_provider", getPackageName() + ".provider"
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            jniDebuggable true

            resValue "string", "sync_account_type", getPackageName() + ".sync"
            resValue "string", "file_provider", getPackageName() + ".provider"
        }
    }


    packagingOptions {
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/LICENSE'
        exclude 'META-INF/MANIFEST.MF'
    }
}

dependencies {
    compileOnly 'org.jetbrains:annotations:19.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android:flexbox:1.1.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation files('libs/linphone-sdk-android-4.4.0.aar')
}
apply plugin: "com.diffplug.gradle.spotless"
spotless {
    java {
        target '**/*.java'
        googleJavaFormat('1.6').aosp()
        removeUnusedImports()
    }
}
project.tasks['preBuild'].dependsOn 'spotlessApply'
